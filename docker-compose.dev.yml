version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: capacity-planner-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: capacity_planner
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: capacity-planner-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Uncomment when ready to add API Gateway
  # api-gateway:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: capacity-planner-api
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgresql://postgres:postgres@postgres:5432/capacity_planner
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: pnpm nx serve api-gateway

  # Uncomment when ready to add Web Frontend
  # web:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: capacity-planner-web
  #   environment:
  #     NODE_ENV: development
  #     NEXT_PUBLIC_API_URL: http://localhost:3000
  #   ports:
  #     - "4200:4200"
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: pnpm nx serve web

volumes:
  postgres_data:
  redis_data: