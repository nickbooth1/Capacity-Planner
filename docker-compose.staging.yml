version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
      args:
        NODE_ENV: staging
    container_name: capacity-planner-api-staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 3000
      CORS_ORIGIN: ${CORS_ORIGIN}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: debug
      ENABLE_METRICS: "true"
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - capacity-planner-staging

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    container_name: capacity-planner-web-staging
    environment:
      NODE_ENV: production
    ports:
      - "4200:3000"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - capacity-planner-staging

  redis:
    image: redis:7-alpine
    container_name: capacity-planner-redis-staging
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - capacity-planner-staging

volumes:
  redis_staging_data:

networks:
  capacity-planner-staging:
    driver: bridge