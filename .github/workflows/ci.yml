name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: false
  NX_DAEMON: false

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
      affected-libs: ${{ steps.affected.outputs.libs }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get affected projects
        id: affected
        run: |
          echo "Fetching origin/main to compare changes..."
          git fetch origin main:refs/remotes/origin/main
          
          AFFECTED_APPS=$(npx nx show projects --affected --type app --base=origin/main --head=HEAD | tr '\n' ',' | sed 's/,$//')
          AFFECTED_LIBS=$(npx nx show projects --affected --type lib --base=origin/main --head=HEAD | tr '\n' ',' | sed 's/,$//')
          
          echo "Affected apps: $AFFECTED_APPS"
          echo "Affected libs: $AFFECTED_LIBS"
          
          echo "apps=$AFFECTED_APPS" >> $GITHUB_OUTPUT
          echo "libs=$AFFECTED_LIBS" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run affected lint
        run: |
          git fetch origin main:refs/remotes/origin/main
          pnpm nx affected --target=lint --base=origin/main --head=HEAD --parallel=3

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run affected tests
        run: |
          git fetch origin main:refs/remotes/origin/main
          pnpm nx affected --target=test --base=origin/main --head=HEAD --parallel=1 --ci --maxWorkers=2 --shard=${{ matrix.shard }}/3

  build:
    name: Build
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma clients
        run: pnpm prisma:generate

      - name: Build affected projects
        run: |
          git fetch origin main:refs/remotes/origin/main
          pnpm nx affected --target=build --base=origin/main --head=HEAD --parallel=2

      - name: Upload build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 5

  e2e:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    if: false # Enable when E2E tests are added
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests
        run: |
          git fetch origin main:refs/remotes/origin/main
          pnpm nx affected --target=e2e --base=origin/main --head=HEAD
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

  all-checks-passed:
    name: All Checks Passed
    needs: [lint, test, build, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"