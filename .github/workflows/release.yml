name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.2.3"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build-and-test:
    name: Build and Test
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma clients
        run: pnpm prisma:generate

      - name: Run tests
        run: pnpm test

      - name: Build all projects
        run: pnpm nx run-many --target=build --all --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.validate-version.outputs.version }}
          path: dist/
          retention-days: 30

  build-docker-images:
    name: Build Docker Images
    needs: [validate-version, build-and-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api-gateway, web]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ needs.validate-version.outputs.version }}
            ghcr.io/${{ github.repository }}/${{ matrix.app }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=${{ matrix.app }}
            NODE_ENV=production

  create-release:
    name: Create Release
    needs: [validate-version, build-and-test, build-docker-images]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -z "$LAST_TAG" ]]; then
            echo "No previous tag found, including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since $LAST_TAG"
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog content
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          ### Features
          $(echo "$COMMITS" | grep -E "^- feat" || echo "No new features")
          
          ### Bug Fixes
          $(echo "$COMMITS" | grep -E "^- fix" || echo "No bug fixes")
          
          ### Other Changes
          $(echo "$COMMITS" | grep -vE "^- (feat|fix)" || echo "No other changes")
          
          ## Docker Images
          
          The following Docker images are available for this release:
          
          - \`ghcr.io/${{ github.repository }}/api-gateway:${{ needs.validate-version.outputs.version }}\`
          - \`ghcr.io/${{ github.repository }}/web:${{ needs.validate-version.outputs.version }}\`
          
          ## Deployment
          
          To deploy this release, update your deployment configuration to use the new image tags.
          EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.validate-version.outputs.version }}
          name: Release ${{ needs.validate-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          artifacts: |
            dist-${{ needs.validate-version.outputs.version }}

  deploy-staging:
    name: Deploy to Staging
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.validate-version.outputs.version }} to staging environment"
          # Add actual deployment steps here
          # For example: kubectl set image deployment/api-gateway api-gateway=ghcr.io/${{ github.repository }}/api-gateway:${{ needs.validate-version.outputs.version }}

  notify-release:
    name: Notify Release
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "Release ${{ needs.validate-version.outputs.version }} completed successfully!"
            # Add actual notification logic here (Slack, Discord, email, etc.)
          else
            echo "Release ${{ needs.validate-version.outputs.version }} failed!"
            # Add failure notification logic here
          fi