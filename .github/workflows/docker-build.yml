name: Docker Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      web: ${{ steps.changes.outputs.web }}
      dockerfiles: ${{ steps.changes.outputs.dockerfiles }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{ github.event.pull_request.base.sha || 'main' }}
          filters: |
            api-gateway:
              - 'apps/api-gateway/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'nx.json'
              - 'tsconfig.base.json'
            web:
              - 'apps/web/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'nx.json'
              - 'tsconfig.base.json'
            dockerfiles:
              - '**/Dockerfile'
              - '**/Dockerfile.*'

  build-api-gateway:
    name: Build API Gateway
    needs: detect-changes
    if: needs.detect-changes.outputs.api-gateway == 'true' || needs.detect-changes.outputs.dockerfiles == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/api-gateway
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api-gateway/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=api-gateway
            NODE_ENV=production

  build-web:
    name: Build Web App
    needs: detect-changes
    if: needs.detect-changes.outputs.web == 'true' || needs.detect-changes.outputs.dockerfiles == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=web
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL || 'http://localhost:3333' }}

  vulnerability-scan:
    name: Vulnerability Scan
    needs: [build-api-gateway, build-web]
    if: github.event_name != 'pull_request' && (needs.build-api-gateway.result == 'success' || needs.build-web.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      matrix:
        image: [api-gateway, web]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  all-docker-builds-passed:
    name: All Docker Builds Passed
    needs: [detect-changes, build-api-gateway, build-web]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build results
        run: |
          # Check if any builds were supposed to run
          API_GATEWAY_SHOULD_RUN="${{ needs.detect-changes.outputs.api-gateway == 'true' || needs.detect-changes.outputs.dockerfiles == 'true' || github.event_name == 'workflow_dispatch' }}"
          WEB_SHOULD_RUN="${{ needs.detect-changes.outputs.web == 'true' || needs.detect-changes.outputs.dockerfiles == 'true' || github.event_name == 'workflow_dispatch' }}"
          
          # Check actual results
          API_GATEWAY_RESULT="${{ needs.build-api-gateway.result }}"
          WEB_RESULT="${{ needs.build-web.result }}"
          
          # Validate results
          if [[ "$API_GATEWAY_SHOULD_RUN" == "true" && "$API_GATEWAY_RESULT" != "success" && "$API_GATEWAY_RESULT" != "skipped" ]]; then
            echo "API Gateway build failed"
            exit 1
          fi
          
          if [[ "$WEB_SHOULD_RUN" == "true" && "$WEB_RESULT" != "success" && "$WEB_RESULT" != "skipped" ]]; then
            echo "Web build failed"
            exit 1
          fi
          
          echo "All required Docker builds passed successfully!"