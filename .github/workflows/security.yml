name: Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run audit
        run: |
          pnpm audit --audit-level=moderate || true
          
          # Generate audit report in JSON format
          pnpm audit --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: pnpm add -g license-checker

      - name: Check licenses
        run: |
          # Generate license report
          npx license-checker --production --summary --out licenses-summary.txt
          npx license-checker --production --json --out licenses.json
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL|AGPL|LGPL|SSPL|CC-BY-NC"
          
          if grep -E "$PROBLEMATIC_LICENSES" licenses-summary.txt; then
            echo "Found potentially problematic licenses"
            grep -E "$PROBLEMATIC_LICENSES" licenses-summary.txt
            exit 1
          fi
          
          echo "License check passed!"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            licenses-summary.txt
            licenses.json
          retention-days: 30

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  security-summary:
    name: Security Summary
    needs: [dependency-scan, codeql-analysis, secret-scan, license-check, sbom-generation]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check security scan results
        run: |
          echo "Security Scan Summary:"
          echo "====================="
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "CodeQL Analysis: ${{ needs.codeql-analysis.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "License Check: ${{ needs.license-check.result }}"
          echo "SBOM Generation: ${{ needs.sbom-generation.result }}"
          
          # Fail if any critical scans failed
          if [[ "${{ needs.secret-scan.result }}" == "failure" || 
                "${{ needs.license-check.result }}" == "failure" ]]; then
            echo "Critical security checks failed!"
            exit 1
          fi
          
          echo "Security checks completed!"